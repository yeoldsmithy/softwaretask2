// A program to demonstrate the operation of a circular buffer.
//
// General description
// A circular buffer is a type of first-in first-out queue, normally fixed in length
// and is used as a temporary store of information that needs to be transmitted 
// asynchronously from one process to another.
//
// Implementation details
// The circular buffer holds messages entered by the user which are to be sent to the
// screen. The operation of the buffer is controlled by a menu from which the user can
// choose one of the following: enter a new message, send (consume) a message from the
// buffer, display the contents of the buffer, save the contents of the buffer to
// to a file or populate the buffer by loading from the file.
//
// The buffer is implemented as a fixed length array. Once all the elements in the array
// have been filled, the first element will need to be used again. As an example of the
// operation of the circular buffer, assume that there are 10 elements in the array,
// 9 messages have been entered by the producer, 6 have been consumed and then a further 5
// produced. The next message to be consumed (tail of the buffer) would be the 7th element
// in the array and the next message entered (head of the buffer) would become the 5th 
// element in the array.
//
// If the number of messages in the buffer is equal to the length of the array and a new
// message is entered, this simply overwrites the last message at the tail of the buffer. 
// This is tered an overflow.
//
// Limitations: It is not possible to load files which have been saved before start
// of this session of the program, I have added a check to ensure it does not crash and
// displays an error message instead.

#include <iostream>
#include <time.h>
#include <fstream>
using namespace std;

// the format of the messages in the buffer
struct Message {
	unsigned char data;  // single byte of information to be sent
	time_t time;  // number of seconds since 1 January 1970
};

// the length of the fixed array to be used for the FIFO buffer - must be at least one
// and no greater than half the maximum value allowed in an unsigned long (see
// the file limits.h)
#define BUFFER_LENGTH 10

//The Circular buffer class sets the length of the buffer and intialises the buffer tail
// and buffer length variables.
class Circularbuffer {

public:
	//Default Contrstuctor
	Circularbuffer();

	//Destructor
	~Circularbuffer();

	// function prototypes
	void Produce();
	void Consume();
	void Show() const;
	void Save() const;
	void Load();

	// member variables
	bool save_check = false; // used to check if a save has been when before attempting to 
							 // load from a file.

private:
	//Member variables
	unsigned long buffer_tail = 0;  // position of the tail in the message buffer -
									// the next message will be consumed from here
	unsigned long buffer_length = 0;  // number of messages in the buffer
	Message message[BUFFER_LENGTH];

};

Circularbuffer::Circularbuffer() {} //Constructor

Circularbuffer::~Circularbuffer() {} //Destructor

// Create a new message and add it to the head of the buffer.
// The data for the message is obtained from the user and a time stamp is obtained from the
// time() function in the C standard library. 
//
// This function is passed the location of the pointer buffer tail and the value of the 
// current buffer length.
//
// Returns: void
void Circularbuffer::Produce()
{
	time_t current_time;
	unsigned long buffer_head;

	// find the element of the buffer in which to store the message
	buffer_head = (buffer_tail + buffer_length) % BUFFER_LENGTH;

	// get the value of the data for the message from the user
	cout << "Add new data" << endl;
	cout << "------------" << endl;
	cout << "Enter data: ";
	cin >> message[buffer_head].data;
	cout << endl;

	// get the value of the time for the message
	message[buffer_head].time = time(&current_time);

	// if no buffer overflow has occurred, adjust the buffer length
	if (buffer_length < BUFFER_LENGTH) {
		buffer_length++;
	}

	// if a buffer overflow has occurred, display an error statement
	else {
		buffer_tail = (buffer_tail + 1) % BUFFER_LENGTH;
		cout << "Overflow error" << endl;
	}
}


// Send (consume) the oldest message by moving the buffer tail along
//
// This function is passed the location of the pointer buffer tail and the value of the 
// current buffer length.
//
// Returns: void
void Circularbuffer::Consume()
{
	// if the buffer is empty, display an error statement
	if (buffer_length == 0) {
		cout << "No messages in the buffer" << endl;
	}

	// if the buffer is not empty, display the message at the tail, remove the message by
	// advancing the tail of buffer offset in a circular manner and adjust the buffer length
	else {
		cout << endl;
		cout << "Offset Data        Time" << endl;
		cout << buffer_tail << "\t";
		cout << message[buffer_tail].data << "\t";
		cout << ctime(&message[buffer_tail].time);
		buffer_tail = (buffer_tail + 1) % BUFFER_LENGTH;
		buffer_length--;
	}
}



// Display all of the messages in the buffer.
//
// This function is passed the location of the pointer buffer tail and the value of the 
// current buffer length.
//
// Returns: void
void Circularbuffer::Show() const
{
	unsigned long count; // count through the messages being displayed
	unsigned long buffer_head;  // the position at which the next message would be pushed

								// if the buffer is empty, display an error statement
	if (buffer_length == 0) {
		cout << "No messages in the buffer" << endl;
	}

	// if the buffer is not empty, display all the messages in the buffer
	else {
		// display a title
		cout << endl;
		cout << "Offset Data        Time" << endl;

		// display messages if they are sequential in the array
		buffer_head = (buffer_tail + buffer_length) % BUFFER_LENGTH;
		if (buffer_tail < buffer_head) {
			for (count = buffer_tail; count < buffer_head; count++) {
				cout << count << "\t";
				cout << message[count].data << "\t";
				cout << ctime(&message[count].time);
			}
		}

		// display messages if part are at the end of the array and the remainder at the start
		else {
			for (count = buffer_tail; count < BUFFER_LENGTH; count++) {
				cout << count << "\t";
				cout << message[count].data << "\t";
				cout << ctime(&message[count].time);
			}
			for (count = 0; count < buffer_head; count++) {
				cout << count << "\t";
				cout << message[count].data << "\t";
				cout << ctime(&message[count].time);
			}
		}
	}
}

// Save all of the messages in the buffer to disk.
//
// This function is passed the location of the pointer buffer tail and the value of the 
// current buffer length.
//
// Returns: void
void Circularbuffer::Save() const
{
	// open the file to be saved to
	fstream FilePointer;
	FilePointer.open("datafile.dat", ios::out);

	// If the buffer is empty, display error message
	if (buffer_length == 0) {
		cout << "No messages in the buffer, cannot save." << endl;
		FilePointer << buffer_length << "\n";
	}
	else {
		unsigned long count; // count through the messages being displayed
		unsigned long buffer_head;  // the position at which the next message would be pushed
		FilePointer << buffer_length << "\n"; // Save the length of the buffer to the file.
		buffer_head = (buffer_tail + buffer_length) % BUFFER_LENGTH;

		// Save messages if they are sequential in the array
		if (buffer_tail < buffer_head) {

			
			for (count = buffer_tail; count < buffer_head; count++) {
				FilePointer << count << "\t";
				FilePointer << message[count].data << "\t";
				FilePointer << ctime(&message[count].time);
			}
		}

		// Save messages if part are at the end of the array and the remainder at the start
		else {
			for (count = buffer_tail; count < BUFFER_LENGTH; count++) {
				FilePointer << count << "\t";
				FilePointer << message[count].data << "\t";
				FilePointer << ctime(&message[count].time);
			}
			for (count = 0; count < buffer_head; count++) {
				FilePointer << count << "\t";
				FilePointer << message[count].data << "\t";
				FilePointer << ctime(&message[count].time);
			}
		}
	}
	FilePointer.close();
}

// Load messages from the file into the buffer.
//
// Returns: void

void Circularbuffer::Load()
{
	if (save_check == false) { //Display an error message if nothing has been saved during
								//this session.
		cout << "Nothing has been saved since the start of the program \n";
	}
	else {
		unsigned long count; // count through the messages being loaded

		fstream FilePointer;
		FilePointer.open("datafile.dat", ios::in);

		if (!FilePointer.good()) //Check the file is as expected
		{
			cout << "FATAL ERROR" << endl;
			exit(1);
		}

		FilePointer >> buffer_length; //Load the length of the buffer which was saved

		for (count = 0; count < buffer_length; count++)
		{
			FilePointer >> count; // Load the contents of the save file into the buffer
			FilePointer >> message[count].data;
			FilePointer >> ctime(&message[count].time);

			cout << count << "\t"; // Output to the screen the new contents of the buffer
			cout << message[count].data << "\t";
			cout << ctime(&message[count].time);
		}
		buffer_tail = 0; //Reset buffer tail

		if (buffer_length != BUFFER_LENGTH) { //Check the length of the buffer is not max

			for (count++; count < BUFFER_LENGTH; count++)	// Clear the rest of the buffer
			{
				message[count].data = 0;
				message[count].time = 0;
			}
		}
		FilePointer.close(); //Close the file
	}
}


//The menu class contains all of the menu options.
class Menu {
public:
	//Default Constructor
	Menu();

	//Default Destructor
	~Menu();

private:
	//Member variables
	Circularbuffer buffer;
	char UserInput;
};

Menu::~Menu() {} //Destructor

Menu::Menu() {
	while (UserInput != '6') {		// loop until the user wishes to exit

									// show the menu of options
		cout << endl;
		cout << "Buffer Management Menu" << endl;
		cout << "----------------------" << endl;
		cout << "1. Produce a new message for the buffer" << endl;
		cout << "2. Consume a message from the buffer" << endl;
		cout << "3. View the contents of the buffer" << endl;
		cout << "4. Save the contents of the buffer to the disc" << endl;
		cout << "5. Load messages from the disc to the buffer" << endl;
		cout << "6. Exit from the program" << endl << endl;

		// get the user's choice
		cout << "Enter your option: ";
		cin >> UserInput;
		cout << endl;

		// act on the user's input
		switch (UserInput) {
		case '1':
			buffer.Produce();
			break;

		case '2':
			buffer.Consume();
			break;

		case '3':
			buffer.Show();
			break;

		case '4':
			buffer.save_check = true;
			buffer.Save();
			break;

		case '5':
			buffer.Load();
			break;

		case '6':
			cout << "Program is now closing \n";
			break;

		default:
			cout << "Invalid entry" << endl << endl;
			break;
		}
	}
}

// Main creates the first object of class menu

int main()
{
	Menu Menu;
}
